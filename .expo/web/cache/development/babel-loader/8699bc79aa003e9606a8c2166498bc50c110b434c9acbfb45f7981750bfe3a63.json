{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar VideosListasSeleccionados = function VideosListasSeleccionados(_ref) {\n  var route = _ref.route,\n    navigation = _ref.navigation;\n  var playlistId = route.params.playlistId;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    videos = _useState2[0],\n    setVideos = _useState2[1];\n  var _useState3 = useState(true),\n    _useState4 = _slicedToArray(_useState3, 2),\n    loading = _useState4[0],\n    setLoading = _useState4[1];\n  useEffect(function () {\n    var fetchVideos = function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(`https://back-ysp.onrender.com/listas/${playlistId}/videos`);\n          var data = yield response.json();\n          setVideos(data);\n        } catch (error) {\n          console.error(\"Error fetching videos:\", error);\n        } finally {\n          setLoading(false);\n        }\n      });\n      return function fetchVideos() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    fetchVideos();\n  }, [playlistId]);\n  if (loading) {\n    return _jsx(View, {\n      style: styles.container,\n      children: _jsx(ActivityIndicator, {\n        size: \"large\",\n        color: \"#0000ff\"\n      })\n    });\n  }\n  var handleItemPress = function handleItemPress(item) {\n    if (item) {\n      var itemId = item.id;\n      console.log('item ID:', item);\n      navigation.navigate(\"Reproductor\", {\n        item: item\n      });\n    } else {\n      console.error('Video no definido:', item);\n    }\n  };\n  return _jsx(View, {\n    style: styles.container,\n    children: loading ? _jsx(ActivityIndicator, {\n      size: \"large\",\n      color: \"#0000ff\"\n    }) : _jsx(FlatList, {\n      data: videos,\n      keyExtractor: function keyExtractor(item) {\n        return item.contentDetails.videoId;\n      },\n      renderItem: function renderItem(_ref3) {\n        var item = _ref3.item;\n        return _jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return handleItemPress(item.contentDetails.videoId);\n          },\n          children: _jsxs(View, {\n            style: styles.playlistThumbnail,\n            children: [_jsx(Image, {\n              source: {\n                uri: item.snippet.thumbnails.medium.url\n              },\n              style: styles.playlistThumbnail,\n              resizeMode: \"cover\"\n            }), _jsx(Text, {\n              children: item.snippet.title\n            })]\n          })\n        });\n      }\n    })\n  });\n};\nexport default VideosListasSeleccionados;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  playlistContainer: {\n    margin: 20,\n    alignItems: \"center\"\n  },\n  playlistThumbnail: {\n    width: 320,\n    height: 180,\n    borderWidth: 1,\n    borderColor: \"white\",\n    marginTop: 40\n  },\n  playlistTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginVertical: 5\n  },\n  playlistDescription: {\n    textAlign: \"center\"\n  }\n});","map":{"version":3,"names":["React","useState","useEffect","View","FlatList","Image","Text","TouchableOpacity","ActivityIndicator","StyleSheet","jsx","_jsx","jsxs","_jsxs","VideosListasSeleccionados","_ref","route","navigation","playlistId","params","_useState","_useState2","_slicedToArray","videos","setVideos","_useState3","_useState4","loading","setLoading","fetchVideos","_ref2","_asyncToGenerator","response","fetch","data","json","error","console","apply","arguments","style","styles","container","children","size","color","handleItemPress","item","itemId","id","log","navigate","keyExtractor","contentDetails","videoId","renderItem","_ref3","onPress","playlistThumbnail","source","uri","snippet","thumbnails","medium","url","resizeMode","title","create","flex","backgroundColor","alignItems","justifyContent","playlistContainer","margin","width","height","borderWidth","borderColor","marginTop","playlistTitle","fontSize","fontWeight","marginVertical","playlistDescription","textAlign"],"sources":["C:/Users/merce/Desktop/NuevoYoSoyElPremio/NYSP/src/screens/VideosListasSeleccionados.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  View,\n  FlatList,\n  Image,\n  Text,\n  TouchableOpacity,\n  ActivityIndicator,\n  StyleSheet,\n} from \"react-native\";\n\nconst VideosListasSeleccionados = ({ route, navigation }) => {\n  const { playlistId } = route.params;\n  const [videos, setVideos] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchVideos = async () => {\n      try {\n        const response = await fetch(\n          `https://back-ysp.onrender.com/listas/${playlistId}/videos`\n        );\n        const data = await response.json();\n\n        // Actualizar el estado con los videos obtenidos\n        setVideos(data);\n      } catch (error) {\n        console.error(\"Error fetching videos:\", error);\n      } finally {\n        // Independientemente del resultado, establecer loading en false\n        setLoading(false);\n      }\n    };\n\n    // Llamar a la función de carga de videos al montar el componente\n    fetchVideos();\n  }, [playlistId]);\n\n  if (loading) {\n    return (\n      <View style={styles.container}>\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      </View>\n    );\n  }\n\n  const handleItemPress = (item) => {\n    if (item) {\n      const itemId = item.id;\n  \n      // Ahora puedes utilizar itemId según tus necesidades, por ejemplo, para construir la URL\n      console.log('item ID:', item);\n  \n      // Luego, puedes navegar a la pantalla de Reproductor y pasar el objeto item o solo el itemId\n      navigation.navigate(\"Reproductor\", { item: item });\n    } else {\n      console.error('Video no definido:', item);\n    }\n  };\n\n  return (\n    <View style={styles.container}>\n      {loading ? (\n        <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n      ) : (\n        <FlatList\n          data={videos}\n          keyExtractor={(item) => item.contentDetails.videoId}\n          renderItem={({ item }) => {\n      \n            return (\n              <TouchableOpacity\n                onPress={() => handleItemPress(item.contentDetails.videoId)}\n              >\n                <View style={styles.playlistThumbnail}>\n                  <Image\n                    source={{ uri: item.snippet.thumbnails.medium.url }}\n                    style={styles.playlistThumbnail}\n                    resizeMode=\"cover\" // O \"contain\" según tus preferencias\n                  />\n                  <Text>{item.snippet.title}</Text>\n                </View>\n              </TouchableOpacity>\n            );\n          }}\n        />\n      )}\n    </View>\n  );\n};\nexport default VideosListasSeleccionados;\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  playlistContainer: {\n    margin: 20,\n    alignItems: \"center\",\n  },\n  playlistThumbnail: {\n    width: 320,\n    height: 180,\n    borderWidth: 1, // Agrega esta línea\n    borderColor: \"white\", // Puedes cambiar el color del borde si es necesario\n    marginTop:40,\n  },\n  playlistTitle: {\n    fontSize: 18,\n    fontWeight: \"bold\",\n    marginVertical: 5,\n  },\n  playlistDescription: {\n    textAlign: \"center\",\n  },\n});\n//   <TouchableOpacity onPress={() => handlePlaylistPress(item)}>\n//       <View style={styles.playlistContainer}>\n//         <Image\n//           source={{ uri: item.snippet.thumbnails.medium.url }}\n//           style={styles.playlistThumbnail}\n//         />\n//         <Text style={styles.playlistTitle}>{item.snippet.title}</Text>\n//         <Text style={styles.playlistDescription}>\n//           {item.snippet.description}\n//         </Text>\n//       </View>\n//     </TouchableOpacity>\n//   );\n\n//   return (\n//     <View style={styles.container}>\n//       {loading ? (\n//         <ActivityIndicator size=\"large\" color=\"#0000ff\" />\n//       ) : (\n//         <FlatList\n//           data={playlists}\n//           keyExtractor={(item) => item.id}\n//           renderItem={renderPlaylistItem}\n//         />\n//       )}\n//     </View>\n//   );\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}