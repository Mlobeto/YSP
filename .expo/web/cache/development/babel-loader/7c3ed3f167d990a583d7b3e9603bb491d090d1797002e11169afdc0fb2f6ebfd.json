{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar lodash_1 = __importDefault(require(\"lodash\"));\nvar google_libphonenumber_1 = __importDefault(require(\"google-libphonenumber\"));\nvar country_1 = __importDefault(require(\"./country\"));\nvar numberType_json_1 = __importDefault(require(\"./resources/numberType.json\"));\nvar phoneUtil = google_libphonenumber_1.default.PhoneNumberUtil.getInstance();\nvar asYouTypeFormatter = google_libphonenumber_1.default.AsYouTypeFormatter;\nvar PhoneNumber = function () {\n  function PhoneNumber() {\n    _classCallCheck(this, PhoneNumber);\n  }\n  _createClass(PhoneNumber, [{\n    key: \"getAllCountries\",\n    value: function getAllCountries() {\n      return country_1.default.getAll();\n    }\n  }, {\n    key: \"getDialCode\",\n    value: function getDialCode(number) {\n      var dialCode = '';\n      if (number.charAt(0) === '+') {\n        var numericChars = '';\n        for (var i = 0; i < number.length; i++) {\n          var c = number.charAt(i);\n          if (this.isNumeric(c)) {\n            numericChars += c;\n            if (country_1.default.getCountryCodes()[numericChars]) {\n              dialCode = number.substr(0, i + 1);\n            }\n            if (numericChars.length === 4) {\n              break;\n            }\n          }\n        }\n      }\n      return dialCode;\n    }\n  }, {\n    key: \"getNumeric\",\n    value: function getNumeric(str) {\n      return str.replace(/\\D/g, '');\n    }\n  }, {\n    key: \"isNumeric\",\n    value: function isNumeric(n) {\n      return !Number.isNaN(parseFloat(n)) && Number.isFinite(Number(n));\n    }\n  }, {\n    key: \"getCountryCodeOfNumber\",\n    value: function getCountryCodeOfNumber(number) {\n      var dialCode = this.getDialCode(number);\n      var numeric = this.getNumeric(dialCode);\n      var countryCode = country_1.default.getCountryCodes()[numeric];\n      if (countryCode) {\n        return lodash_1.default.first(countryCode.filter(function (iso2) {\n          return iso2;\n        }));\n      }\n      return '';\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(number, iso2) {\n      try {\n        return phoneUtil.parse(number, iso2);\n      } catch (err) {\n        console.log(`Exception was thrown: ${err.toString()}`);\n        return null;\n      }\n    }\n  }, {\n    key: \"isValidNumber\",\n    value: function isValidNumber(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      if (phoneInfo) {\n        return phoneUtil.isValidNumber(phoneInfo);\n      }\n      return false;\n    }\n  }, {\n    key: \"format\",\n    value: function format(number, iso2) {\n      var formatter = new asYouTypeFormatter(iso2);\n      var formatted;\n      number.replace(/-/g, '').replace(/ /g, '').replace(/\\(/g, '').replace(/\\)/g, '').split('').forEach(function (n) {\n        formatted = formatter.inputDigit(n);\n      });\n      return formatted;\n    }\n  }, {\n    key: \"getNumberType\",\n    value: function getNumberType(number, iso2) {\n      var phoneInfo = this.parse(number, iso2);\n      var typeIndex = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n      return lodash_1.default.findKey(numberType_json_1.default, function (noType) {\n        return noType === typeIndex;\n      });\n    }\n  }, {\n    key: \"getCountryDataByCode\",\n    value: function getCountryDataByCode(iso2) {\n      return country_1.default.getCountryDataByCode(iso2);\n    }\n  }]);\n  return PhoneNumber;\n}();\nexports.default = new PhoneNumber();","map":{"version":3,"names":["lodash_1","__importDefault","require","google_libphonenumber_1","country_1","numberType_json_1","phoneUtil","default","PhoneNumberUtil","getInstance","asYouTypeFormatter","AsYouTypeFormatter","PhoneNumber","_classCallCheck","_createClass","key","value","getAllCountries","getAll","getDialCode","number","dialCode","charAt","numericChars","i","length","c","isNumeric","getCountryCodes","substr","getNumeric","str","replace","n","Number","isNaN","parseFloat","isFinite","getCountryCodeOfNumber","numeric","countryCode","first","filter","iso2","parse","err","console","log","toString","isValidNumber","phoneInfo","format","formatter","formatted","split","forEach","inputDigit","getNumberType","typeIndex","findKey","noType","getCountryDataByCode","exports"],"sources":["C:\\Users\\merce\\Desktop\\NuevoYoSoyElPremio\\NYSP\\node_modules\\react-native-phone-input\\src\\PhoneNumber.tsx"],"sourcesContent":["import _ from 'lodash';\nimport libPhoneNumber from 'google-libphonenumber';\n\nimport Country from './country';\nimport countries from './resources/countries.json'; // eslint-disable-line @typescript-eslint/no-unused-vars\nimport numberType from './resources/numberType.json'; // eslint-disable-line @typescript-eslint/no-unused-vars\n\nconst phoneUtil = libPhoneNumber.PhoneNumberUtil.getInstance();\nconst asYouTypeFormatter = libPhoneNumber.AsYouTypeFormatter;\n\nclass PhoneNumber {\n    // eslint-disable-next-line class-methods-use-this\n    getAllCountries() {\n        return Country.getAll();\n    }\n\n    getDialCode(number) {\n        let dialCode = '';\n        // only interested in international numbers (starting with a plus)\n        if (number.charAt(0) === '+') {\n            let numericChars = '';\n            // iterate over chars\n            for (let i = 0; i < number.length; i++) {\n                const c = number.charAt(i);\n                // if char is number\n                if (this.isNumeric(c)) {\n                    numericChars += c;\n                    // if current numericChars make a valid dial code\n                    // if (this.countryCodes[numericChars]) {\n                    if (Country.getCountryCodes()[numericChars]) {\n                        // store the actual raw string (useful for matching later)\n                        dialCode = number.substr(0, i + 1);\n                    }\n                    // longest dial code is 4 chars\n                    if (numericChars.length === 4) {\n                        break;\n                    }\n                }\n            }\n        }\n        return dialCode;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getNumeric(str) {\n        return str.replace(/\\D/g, '');\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    isNumeric(n) {\n        return !Number.isNaN(parseFloat(n)) && Number.isFinite(Number(n));\n    }\n\n    getCountryCodeOfNumber(number) {\n        const dialCode = this.getDialCode(number);\n        const numeric = this.getNumeric(dialCode);\n        const countryCode = Country.getCountryCodes()[numeric];\n\n        // countryCode[0] can be null -> get first element that is not null\n        if (countryCode) {\n            return _.first(countryCode.filter((iso2: any) => iso2));\n        }\n\n        return '';\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    parse(number, iso2) {\n        try {\n            return phoneUtil.parse(number, iso2);\n        } catch (err: any) {\n            console.log(`Exception was thrown: ${err.toString()}`);\n            return null;\n        }\n    }\n\n    isValidNumber(number, iso2) {\n        const phoneInfo = this.parse(number, iso2);\n\n        if (phoneInfo) {\n            return phoneUtil.isValidNumber(phoneInfo);\n        }\n\n        return false;\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    format(number, iso2) {\n        const formatter = new asYouTypeFormatter(iso2); // eslint-disable-line new-cap\n        let formatted;\n\n        number.replace(/-/g, '')\n            .replace(/ /g, '')\n            .replace(/\\(/g, '')\n            .replace(/\\)/g, '')\n            .split('')\n            .forEach((n: any) => {\n                formatted = formatter.inputDigit(n);\n            });\n\n        return formatted;\n    }\n\n    getNumberType(number, iso2) {\n        const phoneInfo = this.parse(number, iso2);\n        const typeIndex = phoneInfo ? phoneUtil.getNumberType(phoneInfo) : -1;\n        return _.findKey(numberType, (noType) => noType === typeIndex);\n    }\n\n    // eslint-disable-next-line class-methods-use-this\n    getCountryDataByCode(iso2) {\n        return Country.getCountryDataByCode(iso2);\n    }\n}\n\nexport default new PhoneNumber();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}